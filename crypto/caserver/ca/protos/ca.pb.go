// Code generated by protoc-gen-go.
// source: ca.proto
// DO NOT EDIT!

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	ca.proto

It has these top-level messages:
	NoParam
	IPList
	CertificateRequest
	CertificateReply
	CertificateData
	SignatureValid
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NoParam struct {
}

func (m *NoParam) Reset()                    { *m = NoParam{} }
func (m *NoParam) String() string            { return proto.CompactTextString(m) }
func (*NoParam) ProtoMessage()               {}
func (*NoParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type IPList struct {
	Ip []string `protobuf:"bytes,1,rep,name=ip" json:"ip,omitempty"`
}

func (m *IPList) Reset()                    { *m = IPList{} }
func (m *IPList) String() string            { return proto.CompactTextString(m) }
func (*IPList) ProtoMessage()               {}
func (*IPList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CertificateRequest struct {
	In   []byte `protobuf:"bytes,1,opt,name=in,proto3" json:"in,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *CertificateRequest) Reset()                    { *m = CertificateRequest{} }
func (m *CertificateRequest) String() string            { return proto.CompactTextString(m) }
func (*CertificateRequest) ProtoMessage()               {}
func (*CertificateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type CertificateReply struct {
	In []byte `protobuf:"bytes,1,opt,name=in,proto3" json:"in,omitempty"`
}

func (m *CertificateReply) Reset()                    { *m = CertificateReply{} }
func (m *CertificateReply) String() string            { return proto.CompactTextString(m) }
func (*CertificateReply) ProtoMessage()               {}
func (*CertificateReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type CertificateData struct {
	Cert []byte `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	Root []byte `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
}

func (m *CertificateData) Reset()                    { *m = CertificateData{} }
func (m *CertificateData) String() string            { return proto.CompactTextString(m) }
func (*CertificateData) ProtoMessage()               {}
func (*CertificateData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type SignatureValid struct {
	Valid bool `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
}

func (m *SignatureValid) Reset()                    { *m = SignatureValid{} }
func (m *SignatureValid) String() string            { return proto.CompactTextString(m) }
func (*SignatureValid) ProtoMessage()               {}
func (*SignatureValid) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*NoParam)(nil), "protos.NoParam")
	proto.RegisterType((*IPList)(nil), "protos.IPList")
	proto.RegisterType((*CertificateRequest)(nil), "protos.CertificateRequest")
	proto.RegisterType((*CertificateReply)(nil), "protos.CertificateReply")
	proto.RegisterType((*CertificateData)(nil), "protos.CertificateData")
	proto.RegisterType((*SignatureValid)(nil), "protos.SignatureValid")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Whitelist service

type WhitelistClient interface {
	GetWhitelist(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*IPList, error)
}

type whitelistClient struct {
	cc *grpc.ClientConn
}

func NewWhitelistClient(cc *grpc.ClientConn) WhitelistClient {
	return &whitelistClient{cc}
}

func (c *whitelistClient) GetWhitelist(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*IPList, error) {
	out := new(IPList)
	err := grpc.Invoke(ctx, "/protos.Whitelist/GetWhitelist", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Whitelist service

type WhitelistServer interface {
	GetWhitelist(context.Context, *NoParam) (*IPList, error)
}

func RegisterWhitelistServer(s *grpc.Server, srv WhitelistServer) {
	s.RegisterService(&_Whitelist_serviceDesc, srv)
}

func _Whitelist_GetWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhitelistServer).GetWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Whitelist/GetWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhitelistServer).GetWhitelist(ctx, req.(*NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

var _Whitelist_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Whitelist",
	HandlerType: (*WhitelistServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWhitelist",
			Handler:    _Whitelist_GetWhitelist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

// Client API for CA service

type CAClient interface {
	IssueCertificate(ctx context.Context, in *CertificateRequest, opts ...grpc.CallOption) (*CertificateReply, error)
	GetCACertificate(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*CertificateReply, error)
	VerifySignature(ctx context.Context, in *CertificateData, opts ...grpc.CallOption) (*SignatureValid, error)
}

type cAClient struct {
	cc *grpc.ClientConn
}

func NewCAClient(cc *grpc.ClientConn) CAClient {
	return &cAClient{cc}
}

func (c *cAClient) IssueCertificate(ctx context.Context, in *CertificateRequest, opts ...grpc.CallOption) (*CertificateReply, error) {
	out := new(CertificateReply)
	err := grpc.Invoke(ctx, "/protos.CA/IssueCertificate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cAClient) GetCACertificate(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*CertificateReply, error) {
	out := new(CertificateReply)
	err := grpc.Invoke(ctx, "/protos.CA/GetCACertificate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cAClient) VerifySignature(ctx context.Context, in *CertificateData, opts ...grpc.CallOption) (*SignatureValid, error) {
	out := new(SignatureValid)
	err := grpc.Invoke(ctx, "/protos.CA/VerifySignature", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CA service

type CAServer interface {
	IssueCertificate(context.Context, *CertificateRequest) (*CertificateReply, error)
	GetCACertificate(context.Context, *NoParam) (*CertificateReply, error)
	VerifySignature(context.Context, *CertificateData) (*SignatureValid, error)
}

func RegisterCAServer(s *grpc.Server, srv CAServer) {
	s.RegisterService(&_CA_serviceDesc, srv)
}

func _CA_IssueCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CAServer).IssueCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.CA/IssueCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CAServer).IssueCertificate(ctx, req.(*CertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CA_GetCACertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CAServer).GetCACertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.CA/GetCACertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CAServer).GetCACertificate(ctx, req.(*NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CA_VerifySignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CAServer).VerifySignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.CA/VerifySignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CAServer).VerifySignature(ctx, req.(*CertificateData))
	}
	return interceptor(ctx, in, info, handler)
}

var _CA_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.CA",
	HandlerType: (*CAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IssueCertificate",
			Handler:    _CA_IssueCertificate_Handler,
		},
		{
			MethodName: "GetCACertificate",
			Handler:    _CA_GetCACertificate_Handler,
		},
		{
			MethodName: "VerifySignature",
			Handler:    _CA_VerifySignature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("ca.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x92, 0x41, 0x4b, 0xfb, 0x40,
	0x10, 0xc5, 0x9b, 0xfc, 0xff, 0xd6, 0x66, 0x28, 0x49, 0x58, 0x44, 0x43, 0x4e, 0x61, 0x0f, 0x92,
	0x53, 0xc1, 0x7a, 0xd1, 0x8b, 0x52, 0x52, 0x28, 0x15, 0x91, 0xb2, 0x42, 0x3d, 0xaf, 0x71, 0xaa,
	0x0b, 0x69, 0x12, 0x37, 0x1b, 0x21, 0x9f, 0xd4, 0xaf, 0x23, 0xd9, 0x24, 0x9a, 0xda, 0xe2, 0x29,
	0x6f, 0x66, 0xde, 0x3c, 0x26, 0x3f, 0x16, 0x46, 0x31, 0x9f, 0xe4, 0x32, 0x53, 0x19, 0x19, 0xea,
	0x4f, 0x41, 0x2d, 0x38, 0x7e, 0xc8, 0x56, 0x5c, 0xf2, 0x2d, 0xf5, 0x60, 0xb8, 0x5c, 0xdd, 0x8b,
	0x42, 0x11, 0x1b, 0x4c, 0x91, 0x7b, 0x46, 0xf0, 0x2f, 0xb4, 0x98, 0x29, 0x72, 0x7a, 0x05, 0x24,
	0x42, 0xa9, 0xc4, 0x46, 0xc4, 0x5c, 0x21, 0xc3, 0xf7, 0x12, 0x5b, 0x57, 0xea, 0x19, 0x81, 0x11,
	0x8e, 0x99, 0x29, 0x52, 0x42, 0xe0, 0x7f, 0xca, 0xb7, 0xe8, 0x99, 0x81, 0x11, 0x5a, 0x4c, 0x6b,
	0x4a, 0xc1, 0xdd, 0xd9, 0xcc, 0x93, 0xea, 0xf7, 0x1e, 0xbd, 0x06, 0xa7, 0xe7, 0x99, 0x73, 0xc5,
	0xeb, 0xa8, 0x18, 0xa5, 0x6a, 0x4d, 0x5a, 0xd7, 0x3d, 0x99, 0x65, 0x4a, 0xc7, 0x8f, 0x99, 0xd6,
	0xf4, 0x1c, 0xec, 0x47, 0xf1, 0x9a, 0x72, 0x55, 0x4a, 0x5c, 0xf3, 0x44, 0xbc, 0x90, 0x13, 0x38,
	0xfa, 0xa8, 0x85, 0x5e, 0x1d, 0xb1, 0xa6, 0x98, 0xde, 0x80, 0xf5, 0xf4, 0x26, 0x14, 0x26, 0xf5,
	0xdf, 0x5d, 0xc0, 0x78, 0x81, 0xea, 0xa7, 0x76, 0x1a, 0x24, 0xc5, 0xa4, 0x05, 0xe1, 0xdb, 0x5d,
	0xa3, 0xc1, 0x41, 0x07, 0xd3, 0x4f, 0x03, 0xcc, 0x68, 0x46, 0xee, 0xc0, 0x5d, 0x16, 0x45, 0x89,
	0xbd, 0x73, 0x89, 0xdf, 0x99, 0xf7, 0x09, 0xf9, 0xde, 0xc1, 0x59, 0x9e, 0x54, 0x74, 0x40, 0x6e,
	0xc1, 0x5d, 0xa0, 0x8a, 0x66, 0xfd, 0xac, 0xbd, 0x4b, 0xfe, 0x0a, 0x98, 0x83, 0xb3, 0x46, 0x29,
	0x36, 0xd5, 0x37, 0x01, 0x72, 0x76, 0xc0, 0x5e, 0xf3, 0xf4, 0x4f, 0xbb, 0xc1, 0x2e, 0x2d, 0x3a,
	0x78, 0x6e, 0xde, 0xc1, 0xe5, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x98, 0x1b, 0x7a, 0x1a,
	0x02, 0x00, 0x00,
}
